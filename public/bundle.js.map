{"version":3,"file":null,"sources":["../node_modules/lodash-es/_getPrototype.js","../node_modules/lodash-es/_isHostObject.js","../node_modules/lodash-es/isObjectLike.js","../node_modules/redux/node_modules/symbol-observable/es/index.js","../node_modules/redux/es/utils/warning.js","../src/messagelog/MessageLogContainer.js","../src/GameReducer.js","../src/index.js"],"sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetPrototype = Object.getPrototypeOf;\n\n/**\n * Gets the `[[Prototype]]` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {null|Object} Returns the `[[Prototype]]`.\n */\nfunction getPrototype(value) {\n  return nativeGetPrototype(Object(value));\n}\n\nexport default getPrototype;\n","/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\nexport default isHostObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","/* global window */\nimport ponyfill from './ponyfill';\n\nvar root = this;\nif (typeof global !== 'undefined') {\n\troot = global;\n} else if (typeof window !== 'undefined') {\n\troot = window;\n}\n\nvar result = ponyfill(root);\nexport default result;\n","/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport default function warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n}","const MessageLogContainer = ({messages}) => {\n    <div class='message-log-container'>\n        <div class='message-log-container-list'>\n          { messages.map((message)=>{ return <div>{message.text}</div> }) }\n        </div>\n        <input class='message-log-container-input' onChange={()=>{}}></input>\n        <button class='message-log-container-send' onClick={()=>{}} >Send</button>\n    </div>\n}\n\nMessageLogContainer.propTypes = {\n  messages: React.PropTypes.arrayOf(React.PropTypes.shape({\n    text: React.PropTypes.string\n  }))\n}\nMessageLogContainer.defaultProps = {\n  messages: []\n}\n\nexport default MessageLogContainer\n","const initialState = {}\n\nexport function GameReducer(state = initialState, action) {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n","/* global React, ReactDOM, ReactRedux */\nimport {createStore} from 'redux'\nimport MessageLogContainer from './messagelog'\nimport {GameReducer} from './GameReducer'\n\n\nconst Provider = ReactRedux.Provider\n\nconst store = createStore(GameReducer)\n\n/*const socket = new WebSocket(`ws://${location.host}/severEndpoint`)\n\nsocket.onmessage = (event)=>{\n  //console.log(event)\n  store.dispatch(JSON.parse(event.data))\n  console.log(store.getState().toJS())\n}*/\nconst messages = [{text: 'test message 1'}, {text: 'test message 2'}]\n\nReactDOM.render(\n        <MessageLogContainer messages={messages} onSend=\"(msg)=>{console.log(msg)}\"></MessageLogContainer>\n    ,document.getElementById('mount'))\n"],"names":[],"mappings}