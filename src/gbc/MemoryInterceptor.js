import Memory, {flags, reg8} from './Memory'

const bios = [
  0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
  0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
  0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
  0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
  0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
  0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
  0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
  0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
  0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
  0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
  0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
  0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
  0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
  0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
  0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
  0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50]

function createMemoryInterceptor(memory){

  const interceptedMemory = memory

  const interceptor = {
    readByte(addr){
      if ((addr & 0xF000) === 0x0000) {
        if (!interceptedMemory.flag(flags.isOutOfBios)) { //read bios?
          if (addr < 0x0100)
            return bios[addr]
          else if (interceptedMemory.PC() === 0x0100)
            interceptedMemory.setFlag(flags.isOutOfBios, true)
        }
      } else if((addr & 0xF000) === 0xE000) { //shadow ram
        return interceptedMemory.readByte(addr & 0xDFFF)
      } else if((addr & 0xFE00) === 0xFE00) {
        //gpu stuff
      } else if((addr & 0xFF00) === 0xFF00 && addr >= 0xFF80) {
        //io stuff
      }
      return interceptedMemory.readByte(addr)
    },
    writeByte(addr, value){
      interceptedMemory.writeByte(addr, value)
    },
    readWord(addr){
      return (interceptor.readByte(addr) + (interceptor.readByte(addr+1)<<8))
    },
    writeWord(addr, value){
      interceptor.writeByte(addr, value)
      interceptor.writeByte(addr+1, value)
    },
    reg8(addr){
      return interceptedMemory.reg8(addr)
    },
    setReg8(addr, value){
      interceptedMemory.setReg8(addr, value)
    },
    PC(){
      return interceptedMemory.PC()
    },
    setPC(value){
      interceptedMemory.setPC(value)
    },
    SP(){
      return interceptedMemory.SP()
    },
    setSP(value){
      interceptedMemory.setSP(value)
    },
    clock(){
      return interceptedMemory.clock()
    },
    setClock(value){
      interceptedMemory.setClock(value)
    },
    lastInstructionClock(){
      return interceptedMemory.lastInstructionClock()
    },
    setLastInstructionClock(value){
      interceptedMemory.setLastInstructionClock(value)
    },
    IRQEnableDelay(){
      return interceptedMemory.IRQEnableDelay
    },
    setIRQEnableDelay(value){
      interceptedMemory.setIRQEnableDelay(value)
    },
    flag(flag){
      return interceptedMemory.flag(flag)
    },
    setFlag(flag, state){
      interceptedMemory.setFlag(flag, state)
    }
  }
  
  return interceptor
}

export {reg8, flags} from './Memory'

export default {
  createEmptyMemory(){
    return createMemoryInterceptor(Memory.createEmptyMemory())
  },
  createMemoryWithRom(rom){
    return createMemoryInterceptor(Memory.createMemoryWithRom(rom))
  }
}